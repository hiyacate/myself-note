python2核心编程

命令行选项
--d 提供调试输出。
--o 生成优化的字节码(生成.pyo文件)。
--s 不导入site模块以在启动时查找python路径。
--v 冗余输出(导入语句详细追踪)。
--m mod 将一个模块以脚本形式运行。
--Q opt 除尘选项(参阅文档)。
--c cmd 运行以命令行字符串形式提交python脚本。
file 从给定的文件运行python脚本

语句和表达式

下划线(_)在解释器中有特别的含义，表示最后一个表达式的值
>>> myString = 'Hello World'
>>> myString
'Hello World'
>>> _
'Hello World'

python的pring语句，与字符串格式操作符(%)结合使用，可实现字符串替换功能

>>> print "%s is number %d!" % ("Python", 1)
Python is number 1!

%s表示由一个字符串来替换，而%d表示由一个整型来替换，另外一个很常用的就是%f，它还未由一个浮点型来替换。

python非常灵活，所以即使你将数字传递给%s，也不会像其他要求严格的语言一样引发严重后果。

python语句也支持将输出重定向到文件，符号>>用来重定向输出，下面这个例子将输出重定向到标准错误输出。

>>> print >> sys.stderr, 'Fatal error: invalid input!'
Fatal error: invalid input!

>>> logfile = open('/tmp/mylog.txt', 'a')
>>> print >> logfile, 'Fatal error: invalid input!'
>>> logfile.close()

jerry@debian:/tmp$ cat mylog.txt 
Fatal error: invalid input!

程序输入和raw_input()内置函数

从用户那里得到数据输入的最容易的方法是使用raw_input() 内建函数。它读取标准输入，并将读取到的数据赋值给指定的变量。你可以使用int()内置函数将输入的字符串转换为整型。

>>> user = raw_input('Enter login name:')
Enter login name:root
>>> print 'Your login is:', user
Your login is: root

上面这个例子只能用于文本输入。下面是输入一个数值字符串（并将字符串转换为整型）的例子：

>>> num = raw_input('Now enter a number:' )
Now enter a number:1024
>>> print 'Doubling your number: %d' % (int(num) *2)
Doubling your number: 2048

内建函数int() 将数值字符串转换成整型值，这样才可以对它进行数学运算。

从交互解释器中获得帮助
在学习python的过程中，如果需要得到一个生疏函数的帮助，只需要对它调用内奸函数help()。通过用函数名作为help()的参数就能得到相应的帮助信息。
>>> help(raw_input)

Help on built-in function raw_input in module __builtin__:

raw_input(...)
    raw_input([prompt]) -> string

核心风格：一直在函数外做用户交互操作
新手在需要显示信息或得到用户输入时，很容易想到使用print语句和raw_input()内奸函数。不过我们建议函数应该保持其清晰性，也就是它只应该接受参数，返回结果。从用户那里得到需要的数据，然后调用函数处理，从函数得到返回值，然后显示结果给用户。这样你就能在其他地方也可以使用你的函数而不必担心自定义输出的问题。这个规则的一个例外是，如果函数的基本功能就是为了得到用户输出，或者就是为了输出信息，这时在函数内使用print语句或raw_input()也未尝不可。更重要的是，将函数分为两大类，一类只做事，不需要返回值（比如与用户交互或设置变量的值），另一类则执行一些运算，最后返回结果。如果输出就是函数的目的，那么在函数体内使用pring语句也是可以接受的选择。

注释
和大部分脚本及Unix-shell语言一样，Python也使用#符号标示注释，从#开始，直到一行结束的内容都是注释。

有一种叫做文档字符串的特别注释。你可以在模块、类或者函数的起始添加一个字符串，起到在线文档的功能，这是Java程序员非常熟悉的一个特性。

与普通注释不同，文档字符串可以在运行时访问，也可以用来自动生成文档。

操作符
和其他大部分的语言一样，python中的标准算术操作符以你熟悉的方式工作。
+ - * / // % **
加、减、乘、除和取余都是标准操作符。python有两种除法操作符，单斜杠用作传统除法，双斜杠用作浮点除法（对结果进行四合五入）。传统除法是指如果两个操作数都是整型的话，它将执行的是地板除（取比商小的最大整数），而浮点除尘是真正的除法，不管操作数是什么类型，浮点除法总是执行真正的除法。
还有一个乘方操作符，双星号（**）。尽管我们一直强调这些操作符的算术本质，但是请注意对于其他数据类型，有些操作符是被重载了，比如字符串和列表。让我们看一个例子。
>>> print -2*4 + 3**2
1

就像你看到的，操作符的优先级和你想象的一样：+和-优先级最低，*、/、//、%优先级较高，单目操作符+和-优先级更高，乘方的优先级最高。（3**2)首先求值，然后是（-2*4），然后是对两个结果进行求和。

python当然也有标准比较操作符，比较去处根据表达式的值的真假返回布尔值。
< <= > >= == != <>
试一试，看看这些丝袜运算会得到什么结果。
>>> 2<4
True
>>> 2 == 4
False
>>> 2 > 4
False
>>> 6.2 <= 6
False
>>> 6.2 <= 6.2
True
>>> 6.2 <=6.20001
True

python目前支持两种“不等于”比较操作符，!=和<>,分别是C风格和ABC/Pascal风格。目前后者慢慢地被淘汰了，所以我们推荐使用前者。

python也提供了逻辑操作符。
and or not
使用逻辑操作符可以将任意表达式连接在一起，并得到一个布尔值。
>>> 2<4 and 2==4
False
>>> 2>4 or 2<4
True
>>> not 6.2<=6
True
>>> 3<4<5
True
最后一个例子在其他语言中通常是不合法的，不过python支持这样的表达式，既简洁又优美。它实际上是下面表达式的缩写：
>>> 3<4 and 4<5
True

核心风格：合理使用括号增强代码的可读性
在很多场合使用括号都是一个好主意，而没有括号的话，会使程序得到错误结果，或使代码可读性降低，引起阅读者困惑。括号在python语言中还是必须存在的，不过为了可读性，使用括号总是值得的。任何维护你代码的人会感谢你，在你再次阅读自己的代码时，你也会感谢你自己。

变量和赋值
Python中变量名规则与其他大多数高级语言一样，老师受C语言影响（或者说这门语言本身就是C语言写成的）。变量名仅仅是一些字母开关的标识符——所谓字母开关——意指大写或小写字母，另外还包括下划线（_）。其他的字符可以是数字、字母或下划线。Pyhon变量名是大小写敏感的，也就是说变量“case”与“CaSe"是两个不同的变量。

Ptyhon是动态类型语言，也就是说不需要预先声明变量的类型。变量的类型和值在赋值那一刻被初始化。变量赋值通过等号来执行。
>>> counter = 0
>>> miles = 1000.0
>>> name = 'Bob'
>>> counter = counter + 1
>>> kilometers = 1.609 * miles
>>> print '%f miles is the same as %f km' % (miles, kilometers)
1000.000000 miles is the same as 1609.000000 km

上面是一个变量赋值的例子。第一个是整形赋值，第二个是浮点型赋值，第三个是字符串赋值，第四个是对一个整型增1,最后一个是浮点乘法赋值。
Python也支持增量赋值，也就是操作符和等号合并在一起，看下面的例子。
n = n*10
将下面的例子改成增量赋值方式就是：
n *= 10
Ptyon不支持C语言中的自增1和自减1操作符，这是因为+和-也是单目操作符，Python会将--n解释为-(-n)从而得到n，同样++n的结果也是n。

数字
python支持五种基本数字类型，其中有三种是整型类型。
有符号整型
长整型
布尔值
浮点值
复数
下面是一些例子。

int 0101 84 -237 0x80 017 -680 -0X92
long 29979062458L -841401 0xDECADEDEADBEEFBADFEEDDEAL
bool True False
float 3.13159 4.2E-10 -90. 6.022e23 -1.609E-19
complex 6.23+1.5j -1.23-875J 0+1j 9.80665-8.31441J -.0224+0j

python中有两种有趣的类型，就是Python的长整型和复数类型。请不要将Python的长整型与C语言的长整型混淆。Python的长整型所能表达的范围远远超过C语言的长整型，事实上，Python长整型仅受限于用户计算机的虚拟内存总数。如果你熟悉Java，Python的长整型类似于Java中的BigInter类型。
从长远来看，整型与长整型正在逐步统一为一种整型类型。从Python2.3开始，再也不会报整型溢出错误，结果自动转换为长整型。在未来版本的Python中，整型类型将会无缝结合，长整型后缀“L”也会变得可有可无。
布尔值是特殊的整型。尽管布尔值由常量True和False来表示，如果将布尔值放到一个数值上下文环境中（比如将True与一个数字相加），True当成整型值1,而False则会被当成整型值0.复数（包括-1的平方根，即所谓的虚数）在其他语言中通常不被直接支持（一般通过类来实现）。
其实还有第6种数字类型，即decimal，用于十进制浮点型。不过它并不是内建类型，你必须先导入decimal模块才可以使用这种数值类型。由于需求日渐强烈，python2.4增加了这种类型。举例来说，由于在二进制表示中有一个无限循环片段，数字1.1无法用二进制浮点型精确表示。因此，数字1.1实际上会被表示成如下形式。
>>> 1.1 
1.1000000000000001 
>>> print decimal. Decimal(' 1. 1')
1.1
#python2.7中没有这种情况

字符串
python中字符串被定义为引号之间的字符集合。python支持使用成对的单引号或双引号，三引号（三个连续的单引号或者双引号）可以用来包含特殊字符。使用索引操作符（[]）和切片操作符（[:]）可以得到子字符串。字符串有其特有的索引规则：第一个字符的索引是0,最后一个字符的索引是-1.
加号（+）用于字符串连接运算，星号（*）则用于字符串重复。下面是几个例子。
>> pystr = 'Python'
>>> iscool = 'is cool!'
>>> pystr[0]
'P'
>>> pystr[2:5]
'tho'
>>> iscool[:2]
'is'
>>> iscool[3:]
'cool!'
>>> iscool[-1]
'!'
>>> pystr + iscool
'Pythonis cool!'
>>> pystr + ' ' + iscool
'Python is cool!'
>>> pystr*2
'PythonPython'
>>> '-' * 20
'--------------------'
>>> pystr = '''python
... is cool'''
>>> pystr
'python\nis cool'
>>> print pystr
python
is cool
>>> 

列表和元组
可以将列表和元组当成普通的“数组”，它能保存任意数量任意类型的python对象。和数组一样，通过从0开始的数字索引访问元素，但是列表和元组可以存储不同类型的对象。
列表和元组有几处重要的区别。列表元素用中括号（[]）包裹，元素的个数及元素的值可以改变。元组元素用小括号（()）包裹，不可以更改（尽管他们的内容可以）。元组可以看成是只读的列表。通过切片运算（[]和[:]）可以得到子集，这一点与字符串的使用方法一样。
>>> aList = [1,2,3,4]
>>> aList
[1, 2, 3, 4]
>>> aList[0]
1
>>> aList[2:]
[3, 4]
>>> aList[:3]
[1, 2, 3]
>>> aList[1]=5
>>> aList
[1, 5, 3, 4]

元组也可以进行切片运算，得到的结果也是元组（不能被修改）。
>>> aTuple = ('robots', 77, 93, 'try')
>>> aTuple
('robots', 77, 93, 'try')
>>> aTuple[:3]
('robots', 77, 93)
>>> aTuple[1] = 5
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment

字典
字典是Python中的映射数据类型，工作原理类似Perl中的关联数组或哈希表，由键-值（key-value）对构成。几乎所有类型的Python对象都可以用作键，不过一般还是以数字或者字符串最为常用。
值可以是任意类型的Python对象，字典元素用大括号（{}）包裹。
>>> aDict = {'host':'earth'}
>>> aDict['port'] = 80
>>> aDict
{'host': 'earth', 'port': 80}
>>> aDict.keys()
['host', 'port']
>>> aDict['host']
'earth'
>>> for key in aDict:
...     print key,aDict[key]
...
host earth
port 80

代码块及缩进对齐
代码块通过缩进对齐表达代码逻辑，而不是使用大括号。因为没有了额外的字符，程序的可读性更高。而且缩进完全能够清楚地表达一个语句属于哪个代码块。当然，代码块也可以只有一个语句组成。
对一个Python初学者来说，仅使用缩进可能令他诧异。人们通常竭力避免改变，因此对那些使用大括号很多年的人来说，初次使用纯缩进来表示逻辑也许会多少感到有些不够坚定（不用大括号？到底成不成啊？）。然而回想一下，Python有两大特性，一是简洁，二是可读性好。如果你实在讨厌使用缩进作为代码分界，我们希望从现在开始，半年后再来看一下这种方式。也许你会发现生活中没有大括号并不会像你想像的那么糟糕。

if语句
标准if语句的语法如下。
if expression:
    if_suite
如果表达式的值是非0或者为布尔值True,则代码组if_suite 被执行;否则就去执行下一条语句。代码组(suite)是一个 Python术语，它由一条或多条语句组成，表示一个子代码块。Python与其他语言不同，条件表达式并不需要用括号括起来。
if x < .0:
    print "x" must be at least 0!'
python当然也支持else语句，语法如下。
if expression:
    if_suite
else:
    else_suite

python 还支持elif(意指“else-if”）语句，语法如下。

if expression1:
    if_suite
elif expression2:
    elif_suite
else:
    else_suite

while循环
标准while条件循环语句的语法类似if。再一次，要使用缩进来分隔每个子代码块。
while expresssion:
    while_suite
语句 while_suite 会被连续不断地循环执行，直到天工的值变成0或False，接着Python会执行下一句代码。类似if语句，Python的while语句中的条件表达式也不需要用括号括起来。
>>> counter = 0
>>> while counter <3:
...     print 'loop #%d' % (counter)
...     counter += 1
...
loop #0
loop #1
loop #2

for循环和range()内置函数
python中的for循环与传统的for循环（计数器循环）不太一样，它更像shell脚本里的foreach迭代。python中的for接受可迭代对象（例如序列或迭代器）作为其参数，每次迭代其中一个元素。
>>> print 'I like to use the Internet for:'
I like to use the Internet for:
>>> for item in ['e-mail', 'net-surfing', 'homework', 'chat']:
...     print item
... 
e-mail
net-surfing
homework
chat

上面例子的输出如果能在同一行就会美观许多。print语句默认会给每一行添加一个换行符。只要在print语句的最后添加一个逗号（，），就可以改变它这种行为。
print 'I like to use the Internet for:'
for item in ['e-mail', 'net-surfing', 'homework', 'chat']:
   print item,
print

I like to use the Internet for:
e-mail net-surfing homework chat

为了输出清晰美观，带逗号的print语句输出的元素之间会自动添加一个空格。通过指定输出格式，程序员可以最大程度地控制输出布局，也不用担心这些自动添加的空格。它也可以将所有数据放到一处输出——只需要将数据放在格式化操作符右侧的元组或字典中。
>>> who = 'knights'
>>> what = 'Ni!'
>>> print 'We are the', who, 'who say', what, what, what, what
We are the knights who say Ni! Ni! Ni! Ni!
>>> print 'We are the %s who say %s' % \
... (who, ((what + ' ')*4))
We are the knights who say Ni! Ni! Ni! Ni!
使用字符串格式操作符还允许我们做一些字符串输出之前的整理工作，就像你在刚才的例子中看到的一样。
通过演示一个让python for 循环更像传统循环（换言之，计数循环）的示例，我们来结束对循环的介绍。因为我们不能改变for循环的行为（迭代一个序列），我们可以生成一个数字序列。这样，尽管我们确实是在迭代一个序列，但是它至少展示的是递增计数的效果。
>>> for eachNum in [0, 1, 2]:
...     print eachNum
... 
0
1
2
在这个循环中，eachNum包含的整形值可以用于显示，也可以用于计算。因为我们要使用的数值范围可能会经常变化，python提供了一个range()内建函数来生成这种列表。它正好能满足舱位的需要，接受一个数值范围，生成一个列表。
>>> for eachNum in range(3):
...     print eachNum
...
0
1
2
对字符串来说，很容易迭代每一个字符。
>>> foo = 'abc'
>>> for c in foo:
...     print c
... 
a
b
c
range()函数经常和len()函数一起用于字符串索引。在这里我们要显示每一个元素及其索引值。
>>> foo = 'abc'
>>> for i in range(len(foo)):
...     print foo[i], '(%d)' % i
...
a (0)
b (1)
c (2)
不过，这些循环有一个约束，你要么循环索引，要么循环元素。这导致了enumerate()函数的推出(python2.3新增）。它同时做到了这两点。
>>> for i, ch in enumerate(foo):
...     print ch, '(%d)' % i
... 
a (0)
b (1)
c (2)

列表解析
这是一个让人欣喜的术语，表示你可以在一行中使用一个for循环将所有值放到一个列表当中：
>>> squared = [x ** 2 for x in range(4)]
>>> for i in squared:
...     print i
...
0
1
4
9

列表解析甚至能做更复杂的事情，比如挑选出符合要求的值放入列表。
>>> sqdEvens = [x ** 2 for x in range(8) if not x % 2]
>>>
>>> for i in sqdEvens:
...     print i
...
0
4
16
36

文件和内奸函数open()、file()
在你已经习惯一门语言的语法之后，文件访问是相当重要的一环。在一些工作做完之后，将它保存到持久存储是很重要的。
如何打开文件
handle = open(file_name, access_mode = 'r')
file_name变量包含我们希望打开的文件的字符串名字，access_mode中的'r'表示读取，'w'表示写入，'a'表示添加。其他可能用到的标识还有'+'表示读写，'b'表示二进制访问。如果未提供access_mode,默认值为'r'。如果open()成功，一个文件对象句柄会被返回。所有后续的文件操作都必须通过此文件句柄进行。当一个文件对象返回之后，我们就可以访问它的一些方法，比如readlines()和close()。文件对象的方法属性也必须通过句点属性标识法访问。
什么是属性
属性是与数据有关的项目。属性可以是简单的数据值，也可以是可执行对象，比如函数和方法。哪些对象拥有属性呢？很多。类、模块、文件和复数等对象都拥有属性。
我如何访问对象属性？使用句点属性标识法。也就是说在对象名和属性名之间加一个句点（.）:boject.attribute。
下面有一些代码，提示用户输入文件名，然后打开一个文件，并显示它的内容到屏幕上。
filename = raw_input('Enter file name:')
fobj = open(filename, 'r')
for eachLine in fobj:
    print eachLine,
fobj.close()
我们的代码没有用循环一次取一行显示，而是做了点改变。我们一次诗篇文件地所有行，然后关闭文件，再迭代每一行输出。这样写代码的好处是能够快速完整地访问文件。内容输出和文件访问不必交替进行。这样代码更清晰，而且将不相关的任务区分开来。需要注意的一点是文件的大小。上面的代码适用于文件大小适中的文件。对于很大有文件来说，上面的代码会战胜太多的内存，这时你最好一次读一行。
我们的代码中另一个有趣的语句是我们又一次在print语句中使用逗号来抑制自动生成的换行符号。为什么要这样做？因为文件中的每行文件已经自带了换行字符，如果我们不抑制print语句产生的换行符号，文本在显示时就会有额外的空行产生。
file()内建函数是最近才添加到python当中的。它的功能等同于open(),不过file()这个名字可以更确切地表明它是一个工厂函数（生成文件对象）。类似于int()生成整型对象，dict()生成字典对象。

错误和异常
编译时会检查语法错误，不过python也允许在程序运行时检测错误。当检测到一个错误，python解释器就会引发一个异常，并显示异常的详细信息。程序员可以根据这些信息迅速定位问题并进行调试，并找出处理错误的办法。
要给你的代码添加错误检测及异常处理，只要将它们“封闭”在try-except语句当中。try之后的代码组，就是你打算管理的代码。except之后的代码组，则是你处理错误的代码。
程序员也可以通过使用raise语句故意引发一个异常。

函数
类似于其他语言，python中的函数使用小括号（()）调用。函数在调用之前必须先定义。如果函数中没有return语句，就会自动返回None对象。
Python是通过引用调用的。这意味着函数内对参数的改变会影响到原始对象。不过事实上只有可变对象会受此影响，对不可变对象来说，它的行为类似按值调用。

如何定义函数
def function_name([arguments]):
    "optional documentation string"
    function_suite
定义一个函数的语法由 def 关键字及紧随其后的函数名，再加上该函数需要的几个参数组成。函数参数（比较上面例子中的 arguments )是可选的，这也是为什么把它们放到中括号中的原因。（在你的代码中千万别写上中括号！）这个语句由一个冒号（：）结束（与if和while语句的结束方式一样），之后是代表函数体的代码组，下面是一个简短的例子。
def addMe2Me(x):
    'apply + operation to argument'
    return (x+x)
这个函数，做的是“在我的值上加我”的工作。它接受一个对象，将它的值加到自身，然后返回和。数值类型参数，它的结果是显而易见的，不过我要在这里指出，加号操作符几乎与所有数据类型工作。换句话说，几乎所有的标准数据类型都支持+操作符，不管是数值相加还是序列合并。

如何调用函数
>>> def addMe2Me(x):
...     'apply + operation to argument'
...     return (x+x)
...
>>> addMe2Me(4.25)
8.5
>>> addMe2Me(10)
20
>>> addMe2Me('Python')
'PythonPython'
>>>
>>> addMe2Me([-1, 'abc'])
[-1, 'abc', -1, 'abc']

Python语言中调用函数与其他高级语言中一样，为函数名加上函数操作符——一对小括号。括号之间是所有可选的参数。即使一个参数也没有，小括号也不能省略。

默认参数
函数的参数可以有一个默认值，如果提供有默认值，在函数定义中，参数以赋值语句的形式提供。事实上这仅仅是提供默认参数的语法，它表示调用时如果没有提供这个参数，它就取这个值作为默认值。
>>> def foo(debug=True):
...     'determine if in debug mode with default argument'
...     if debug:
...             print 'in debug mode'
...     print 'done'
...
>>> foo()
in debug mode
done
>>> foo(False)
done

在上面的例子里，debug参数有一个默认值True。如果我们没有传递参数给函数foo(),debug自动拿到一个值True。在第二次调用foo()时，我们故意传递一个参数False给foo(),这样，默认参数就没有被使用。

类
类是面向对象编程的核心，它扮演相关数据及逻辑容器的角色。它们提供了创建“真实”对象（也就是实例）的蓝图。因为Python并不强求你以面向对象的方式编程（与java不同）。

如何定义类
class ClassName(base_class[es]):
    "optional documentation string"
    static_member_declarations
    method_declarations

使用class关键字定义类。可以提供一个可选的父类或者说基类；如果没有合适的基类，那就使用object作为基类。class行之后是可选的文档字符串、静态成员定义及方法定义。

class FooClass(object):
    """my very first class: FooClass"""
    version = 0.1 #class (data) attribute

    def __init__(self, nm='John Doe'):
        """constructor"""
        self.name = nm #class instance (data) attribute
        print 'Created a class instance for', nm

    def showname(self):
        """display instance attribute and class name"""
        print 'Your name is', self.name
        print 'My name is' self.__class__.__name__

    def showver(self):
        """display class(static) attribute"""
        print self.version # references FooClass.version

    def addMe2Me(self, x): # does not use 'self'
        """apply + operation to argument"""
        return x + x
在上面这个类中，我们定义了一个静态变量version,它将被所有实例及4个方法共享——__init__()、showname()、showver()及熟悉的 addMe2Me()。这些show*()方法并没有做什么有用的事情，仅仅输出对应的信息。__init__()方法有一个特殊名字，所有名字开始和结束都有两个下划线的方法都是特殊方法。
当一个类实例被创建时，__init__()方法会自动执行，在类实例创建完毕后执行，类似构造器。__init__() 可以被当成构造器，不过不像其他语言中的构造器，它并不创建实例——它仅仅是你的对象创建后执行的第一个方法。它的目的是执行一些该对象的必要的初始化工作。通过创建自己的__init__()方法，你可以覆盖默认的__init__()方法（默认的方法什么也不做），从而能够修饰刚刚创建的对象。在这个例子里，我们初始化了一个名为name的类实例属性（或者说是成员）。这个变量仅在实例中存在，它并还是实际类本身的一部分。__init__()需要一个默认的参数，前一节中曾经介绍过。毫无疑问，你也注意至每个方法都有的一个参数，self。
什么是self?它是类实例自身的引用。其他面向对象语言通常使用一个名为this的标识符。

如何创建类实例
>>> fool = FooClass()
Created a class instance for John Doe

屏幕上显示的字符串正是自动调用__init__()方法的结果。当一个实例被创建，__init__()就会被自动调用，不管这个__init__()是自定义的还是默认的。
创建一个类实例就像调用一个函数，它们确实有一样的语法，它们都是可调用对象。类实例使用同样的函数操作符调用一个函数或方法。既然我们成功创建了第一个实例，那现在来进行一些方法调用。
>>> fool.showname()
Your name is John Doe
My name is FooClass
>>>
>>> fool.showver()
0.1
>>> print fool.addMe2Me(5)
10
>>> print fool.addMe2Me('xyz')
xyzxyz
每个方法的调用都返回我们期望的结果。比较有趣的数据是类名字。在showname()方法中，我们显示self.__class__.__name__变量的值。对一个实例来说，这个变量表示实例化它的名字（self.__class__引用实际的类）。在我们的例子里，创建类实例时我们并未传递名字参数，因此默认参数'John Doe'就被自动使用。在我们下一个例子里，我们将指定一个参数。
>>> foo2 = FooClass('Jane Smith')
Created a class instance for Jane Smith
>>> foo2.showname()
Your name is Jane Smith
My name is FooClass

模块
模块是一种组织形式，它将彼此有关系的python代码组织到一个个独立文件当中。模块可以包含可执行代码、函数和类或者这些东西的组合。
当你创建了一个python源文件，模块的名字就是不带.py后缀的文件名。一个模块创建之后，你可以从另一个模块中使用import 语句导入这个模块来使用。

如何导入模块
import module_name

如何访问一个模块函数或访问一个模块变量
一旦导入完成，一个模块的属性（函数和变量）可以通过熟悉的句点属性标识法访问。
module.function()
module.variable
现在我们再次提供Hello World!例子，不过这次使用sys模块中的输出函数。
>>> sys.stdout.write('Hello World!\n')
Hello World!
>>> sys.platform
'linux2'
>>> sys.version
'2.7.16 (default, Oct 10 2019, 22:02:15) \n[GCC 8.3.0]'
这些代码的输出与我们使用pring语句完全相同。唯一的区别在于这次调用了标准输出的write()方法，而且这次需要显示地在字符串中提供换行字符。不同于print语句，write()不会自动在字符串后面添加换行符号。

什么是PEP
一个PEP就是一个Python增强提案(Python Enhancement Proposal)，这也是在新版Python中新我的方式。从初学者的角度看，它们是一些高级读物，不但提供了新特性的完整描述，还有添加这些新特性的理由，如果需要的话，不会提供新的语法、技术实现细节、身后兼容信息等。在一个新特性被整合进Python之前，必须通过Python开发社区、PEP作者及实现者，还有Python创始人Guido van Rossum的一致同意。PEP1阐述了PEP的目标及书写指南。在PEP0中可以找到所有的PEP。PEP索引的网址是http://python.org/dev/peps。

实用的函数
下面提供了一些有用的内建函数
+-----------------------------+----------------------------------------------------------------+
| 函数                        | 描述                                                           |
+-----------------------------+----------------------------------------------------------------+
| dir([obj])                  | 显示对象的属性，如果没有提供参数，则显示全局变量的名字         |
| help([obj])                 | 以一种整齐美观的形式，显示对象的文档字符串，                   |
|                             | 如果没有提供任何参数，则会进入交互帮助                         |
| int(obj)                    | 将一个对象转换为整型                                           |
| len(obj)                    | 返回对象的长度                                                 |
| open(fn, mode)              | 以mode('r'=读,'w'=写)方式打开一个文件名为fn的文件              |
| range([[start,]stop[,step]) | 返回一个整型列表。起始值为start,结束值为stop-1,                |
|                             | start默认值为0,step默认值为1                                   |
| raw_input(str)              | 等待用户输入一个字符串，可以提供一个可选的参数str用作提示信息。|
| str(obj)                    | 将一个对象转换为字符串                                         |
| type(obj)                   | 返回对象的类型（返回值本身是一个type对象!)                     |
+-----------------------------+----------------------------------------------------------------+

dir() 函数
例子：dir(list)



