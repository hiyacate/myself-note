语句和语法

python语句中有一些基本规则和特殊字符
井号（#）表示之后的字符为python注释；
换行（\n）是标准的行分隔符（通常一个语句一行）;
反斜线（\）继续上一行;
分号（;）将两个语名连接在一行中；
冒号（：）将代码块的头和体分开；
语句（代码块）用缩进块的方式体现;
不同的缩进深度分隔不同的代码块；
python文件以模块的形式组织。

注释（#）
首要说明的事情是：尽管python是可读性最好的语言之一，这并不意味着程序员在代码中就可以不写注释。和很多unix脚本类似，python注释语句从#字符开始，注释可以在一行的任何地方开始，解释器会忽略掉该行#之后的所有内容。要正确地使用注释。

继续(\)
python语句，一般使用换行分隔，也就是说一行一个语句。一行过长的语句可以使用反斜杠(\)分解成几行，如下例。
# check conditions
if (weather_is_hot == 1) and \
(shark_warnings == 0):
    send_goto_beach_mesg_to_pager()

有两种意外情况一个语句不使用反斜线也可以跨行。在使用闭合操作符时，单一语句可以跨多行，例如：在含有小括号、中括号、花括号时可以多行书写。另外就是三引号包括下的字符串也可以跨行书写，如下例。

#显示一个三引号字符串
print '''hi there, this is a long message for you
that goes over multiple lines... you will find
out soon that triple quotes in Python allows
this kind of fun! it is like a day on the beach!'''\
#给一些变量赋值
go_surf, get_a_tan_while, boat_size, toll_money = (1,
'windsurfing', 40.0, -2.00)

如果要在使用反斜线换行和使用括号元素换行两者之间作一个选择，我们推荐使用括号，这样可读性会更好。

多个语句构成代码组（:）
缩进相同的一级语句构成一个代码块，我们称之为代码组。像if、while、def和class这样的复合语句，首行以关键字开始，以冒号（：）结束，该行之后的一行或多行代码构成代码组。我们将首行及后面的代码组称为一个子句(clause)。

代码组由不同的缩进分隔
python使用缩进来分隔组。代码的层次关系是通过同样深度的空格或制表符缩进体现的。同一 代码组的代码行必须严格左对齐（左边有同样多的空格或同样多的制表符），如果不严格遵守这个规则，同一组的代码就可能被当成另一个组，甚至会导致语法错误。

核心风格：缩进4个空格宽度，避免使用制表符
对一个初次使用空白字符作为代码块分界的人来说，遇到的第一个问题是，缩进多大宽度才合适？2个太少，6～8个又太多，因此我们推荐使用4个空格宽度。需要说明一点，不同的文本编辑器中制表符代表的空白宽度不一，如果你的代码要跨平台应用，或者被不同的编辑器读写，建议你还要使用制表符。使用空格或制表符这风格都得到了python的支持，并被收录到python代码风格指南文档。
随着缩进深度的增加，代码块的层次也在加深，没有缩进的代码块是最高层次的被 千儿八百脚本的“主体”(main)部分。
使用缩进对齐这种方式组织代码，不但代码风格优雅，而且也大大提高了代码的可读性。而且它有效避免了“悬挂else"(dangling-else)问题，和未写大括号的单一子句问题。（如果C语言中if语句没写大括号，而后面却跟着两个缩进的语句，这会造成不论条件表达式是否成立，第二个语句总会执行。这种问题很难调试，不知道困惑了多少程序员。）
最后一点，由于python只使用缩进方式表达代码块逻辑，因此“神圣的大括号战争”永远不会发生在python身上。C、C++和java语言中，开始大括号可以在第1行的尾部，也可以在第2行的头部，也可以在第2行空几格后开始，这就造成不同的人选择不同的风格，于是你就会看到大括号战争的场景了。

同一行书写多个语句（;）
分号（;）允许你将多个语句写在同一行上，语句之间用分号隔开，而这些语句也不能在这行开始一个新的代码块。这里有一个例子：
import sys; x = 'foo'; sys.stdout.write(x+'\n')
必须指出一点，同一行上书写多个语句会大大降低代码的可读性，python虽然允许但不提倡你这么做。

模块
每一个python脚本都可以被当成是一个模块。模块以磁盘文件的形式存在。当一个模块变得过大，并且驱动了太多功能的话，就应该考虑拆一些代码出来另外建一个模块。模块里的代码可以是一段执行的脚本，也可以是一堆类似库函数的代码，从而可以被别的模块导入（import）调用。

变量赋值

赋值操作符
python语言中，等号（=）是主要的同仁操作符（其他的是增量赋值操作符）。
anInt = 12
aString = 'cart'
aFloat = -3.1415 * (5.0 ** 2)
anotherString = 'shop' + 'ping'
aList = [3.14e10, '2nd elmt of a list', 8.82-4.371j]

注意，赋值并不是直接将值赋给一个变量，尽管你可能根据其他语言编程经验认为应该如此。在python语言中，对象是通过引用传送的。在赋值时不管这个对象是新创建的，还是一个已经存在的，都是将该对象的引用（并不是值）赋值给变量。
同样的，如果你比较熟悉C，你会知道赋值语句其实是被当作一个表达式（可以返回值）。不过这条并不适合Python，Python的语句不会返回值。类似下面的语句在python中是非法的。
>>> x = 1
>>> y = (x=x+1) #赋值语句不是合法表达式
  File "<stdin>", line 1
    y = (x=x+1) #赋值语句不是合法表达式
          ^
SyntaxError: invalid syntax

链式赋值没有问题，比如：
In [4]: y = x = x+1

In [5]: x,y
Out[5]: (2, 2)

>>> y = x = x+1
>>> x,y
(2, 2)

增量赋值
从python2.0开始，等号可以和一个算术操作符组合在一起，将计算结果重新赋值给左边的变量。这被称为增量赋值，类似下面的语句：
x = x+1
现在可以写成
x +=1

增量赋值通过作用赋值操作符，将数学运算隐藏在赋值过程当中。如果你用过C、C++或Java，会觉得下面的操作符很熟悉。
+=   -=   *=  /=  %=  **=
<<=  >>=  &=  ^=  |=

增量赋值相对于普通赋值不仅仅是写法上的改变，最有意义的变化是第一个对象仅被处理一次，可变对象会被就地修改（无修拷贝引用），不可变对象则和A=A+B的结果一样（分配一个新对象，我们前面提到过，有一个例外就是A仅被求值一次。
>>> m = 12
>>> m %= 7
>>> m
5
>>> m **=2
>>> m
25
>>> aList = [123, 'xyz']
>>> aList += [45.6e7]
>>> aList
[123, 'xyz', 456000000.0]
python不支持类似x++或--x这样的前置/后置自增/自减运算。

多重赋值
>>> x = y = z = 1
>>> x
1
>>> y
1
>>> z
1
在上面的例子中，一个值为1的整型对象被创建，该对象的同一个引用被赋值给x,y和z。也就是一个对象赋值给了多个变量。当然，在python中将多个对象同仁给多个变量也是可以的。

多元赋值
另一种将多个变量同时赋值的方法我们称为多元赋值（multuple）。这不是python的官方术语，而是我们将"mul-tuple"连在一起自创的。因为采用这种方式赋值时，等号两边的对象都是元组。
>>> x, y, z = 1, 2, 'a string'
>>> x
1
>>> y
2
>>> z
'a string'
在上面的例子中，两个整型对象（值分别为1和2）及一个字符串对象，被分别赋值给x, y和z。通常元组需要用圆括号(小括号)括起来，尽管它们是可选的。我们建议总是加上圆括号以使你的代码有更高的可读性。
>>> (x, y, z) = (1, 2, 'a string')
在其他类似C的语言中，如果你要交换两个值，你会想到使用一个临时变量如tmp来临时保存其中一个值。
/*C语言中两个变量交换*/
tmp = x;
x = y;
y = tmp;
在上面的C代码片段中，变量x和变量y的值被相互交换。临时变量tmp被用于将y赋值给x前先保存x的值。将y的值赋值给x之后，才可以将保存在tmp变量中x的值赋值给y。python的多元赋值方式可以实现无需中间变量交换两个变量的值。
#python中交换两个变量的值
>>> x, y = 1, 2
>>> x
1
>>> y
2
>>> x, y = y, x
>>> x
2
>>> y
1
显然，python在赋值之前以经事先对x和y的新值做了计算。

标识符
标识符是计算机语言中允许作为名字的有效字符串集合。其中，有一部分是关键字，构成语言的标识符。这样的标识符是保留字，不能用于其他用途，否则会引起语法错误（SyntaxError异常）。
python还有称为“内建”（built-in）的标识符集合，虽然它们不是保留字，但是不推荐使用这些特别的名字

合法的python标识符字符串规则和其他大部分用C编写的高级语言相似：
第一个字符必须是字母或下划线（_）;
剩下的字符可以是字母和数字或下划线;
大小写敏感。
标识符不可以数字开头;除了下划线，其他的符号都不允许使用。处理下划线最简单的方法是把它们当成字母字符。大小写敏感意味着foo不同于Foo，而这两者也不同于FOO。

关键字
下面列出了python关键字。一般来说，任何语言的关键字都是相对稳定的，但事情总会改变（python是一种发展和进化中的语言），keyword模块中同时包含了一个关键字列表和一个iskeyword()函数。(此处部分a,b,c,d为角标)

and as^b assert^c break class continue def del elif else except exec finally for from global if import in is lambda not or pass print raise return try while with^b yield^d None^e

a.从python1.4开始关键字access就被费除了
b.python2.6时加入
c.python1.5时加入
d.python2.3时加入
e.python2.4中非关键字常量

内建
除了关键字之外，python还有可以在任何一级代码使用的“内建”（built-in）的名字集合，这些名字可以由解释器设置或使用。虽然built-in还是关建字，但是应该把它当作“系统保留字”，不做它用。然而，有些情况要求覆盖（也就是重定义、替换）它们。python不支持重载标识符，所以任何时刻都只有一个名字绑定。
我们还可以告诉高级读者built-in是__builtins__模块的成员，在你的程序开始或交互解释器中给出>>>提示之前，由解释器自动导入的。把它们看成适用在任何一级python代码的全局变量。

专用下划线标识符
python下划线作为变量前缀和后缀指定特殊变量。稍后我们会发现，对于程序来说，其中有的变量是非常有用的，而其他的则是未知或无用的。这里对python中下划线的特殊用法做了总结。
_xxx 不用'from module import *'导入
_xxx_ 系统定义名字
_xxx 类中的私有变量名

核心风格：避免用下划线作为变量名的开始
因为下划线对解释器有特殊的意义，而且是内建标识符所使用的符号，我们建议程序员避免使用下划线作为变量名的开始。一般来讲，变量名_xxx被看做是“私有的”，在模块或类外不可以使用。当变量名是私有的时候，用_xxx来表示变量是很好的习惯。因为变量名__xxx__对python来说有特殊含义，对于普通的变量名应当避免这种命名风格。

基本风格指南
注释
注释对于自己和后来人来说都是非常重要的，特别是对那些很久没有被动过的代码而言，注释更显得有用了。既不能缺少注释，也不能过度使用注释。尽可能使注释简洁明了，并放在最合适的地方。这样注释便为每个人节省了时间和精力。记住，要确保注释的准确性。
文档
python还提供了一个机制，可以通过__doc__特别变量，动态获得文档字串。在模块、类声明、或函数声明中第一个没有赋值的字符串可以用属性obj.__doc__来进行访问，其中obj是一个模块、类、或函数的名字。这在运行时也可以进行！
缩进
因为缩进对齐有非常重要的作用，你得考虑用什么样的缩进风格才让代码容易阅读。在选择要空的格数的时候，常识也起着非常大的作用。
1个或2个可能不够，很难确定代码语句属于哪个块。
7～10个可能太多，如果代码内嵌的层次太多，就会使得代码很难阅读。4个空格非常的流行，更不用说python的创造者也支持这种风格。5和6个也不坏，但是文本编缉器通常不支持这样的设置，所以也不经常使用。3个和7个是边界情况。
当使用制表符Tab的时候，请记住不同的文本编缉器对它的设置是不一样。如果你的代码会存在并运行在不同的平台上，或者会用不同的文本纺织器打开，建议你不要使用Tab。
选择标识符名称
好的判断也适用于选择标识符的名称，请为变量选择短而意义丰富的标识符。虽然变量名的长度对于今天的编程语言不再是一个问题，但是使用简短的名字依然是个好习惯，这个原则同样使用于模块(Python文件)的命名

Python风格指南
